import express from 'express';
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const sql = require('msnodesqlv8');
import 'dotenv/config';

const router = express.Router();

// Add route handlers to router
router.get('/getAllClient', async (req, res) => {
    return getAllClient(req, res);
});

router.get('/getClientByID/:id', async (req, res) => {
    return getClientById(req, res);
});


// Connection string for msnodesqlv8 with Windows Authentication
const connectionString = `server=${process.env.DB_SERVER || "FACT-LAP-07"};Database=${process.env.DB_NAME || "Fact"};Trusted_Connection=Yes;Driver={ODBC Driver 17 for SQL Server};`;

// Helper function to execute SQL queries
const executeQuery = (queryString, params = []) => {
    return new Promise((resolve, reject) => {
        sql.query(connectionString, queryString, params, (err, rows) => {
            if (err) {
                reject(err);
            } else {
                resolve(rows);
            }
        });
    });
};



// Function to generate auto Client ID
const generateClientId = async () => {
    try {
        // Get the maximum Client_ClientId and increment it
        const maxIdQuery = `
            SELECT TOP 1 CAST(Client_ClientId AS INT) as maxId 
            FROM ClientMaster 
            WHERE ISNUMERIC(Client_ClientId) = 1 
            ORDER BY CAST(Client_ClientId AS INT) DESC
        `;

        const result = await executeQuery(maxIdQuery, []);

        if (result.length > 0 && result[0].maxId) {
            return (parseInt(result[0].maxId) + 1).toString();
        } else {
            return '1';
        }
    } catch (error) {
        console.error('Error generating Client ID:', error);
        return Date.now().toString();
    }
};

// GET /api/clientmaster/getAllClient - Get all clients
export const getAllClient = async (req, res) => {
    try {
        console.log('Fetching all clients from ClientMaster table');

        const selectQuery = `
            SELECT * FROM ClientMaster 
        `;

        const clients = await executeQuery(selectQuery);
        console.log('Fetched clients from database:', clients);

        res.json({
            success: true,
            message: 'Clients retrieved successfully',
            data: clients
        });
    } catch (error) {
        console.error('Error fetching clients:', error);
        res.status(500).json({
            success: false,
            message: 'Internal server error',
            error: error.message
        });
    }
};

// GET /api/clientmaster/getClientByID/:id - Get client by ID
export const getClientById = async (req, res) => {
    try {
        const clientId = parseInt(req.params.id);

        if (isNaN(clientId)) {
            return res.status(400).json({
                success: false,
                message: 'Invalid client ID'
            });
        }

       
        const selectQuery = `
            SELECT * FROM ClientMaster 
            WHERE AutoId = ?
        `;

        const clients = await executeQuery(selectQuery, [clientId]);

        if (!clients || clients.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Client does not exists'
            });
        }

        console.log('Fetched client from database:', clients[0]);

        res.json({
            success: true,
            message: 'Client retrieved successfully',
            data: clients[0]
        });
    } catch (error) {
        console.error('Error fetching client by ID:', error);
        res.status(500).json({
            success: false,
            message: 'Internal server error',
            error: error.message
        });
    }
};

// POST /api/clientmaster/addClient - Create new client
router.post('/addClient', async (req, res) => {
    try {
        const {
            ClientName,
            ClientContactNumber,
            ClientAddress,
            ClientPAN,
            ClientGST,
            ClientCIN,
            Client_SecreteKey,
            CreatedBy
        } = req.body;

        console.log('Creating new client:', req.body);

        // Basic validation - only ClientName is required now
        if (!ClientName) {
            return res.status(400).json({
                success: false,
                message: 'ClientName is required'
            });
        }

        // Auto-generate Client_ClientId
        const autoGeneratedClientId = await generateClientId();
        console.log('Auto-generated Client ID:', autoGeneratedClientId);

        // Get current timestamp for CreatedDate
        const currentDateTime = new Date().toISOString();
        const currentUser = CreatedBy || 'System';

        console.log('Current User:', currentUser);
        console.log('Current DateTime:', currentDateTime);

        // Escape single quotes to prevent SQL injection
        const escapeString = (str) => str ? str.replace(/'/g, "''") : null;

        // Insert new client with auto-generated Client_ClientId    
        const insertQuery = `
            INSERT INTO ClientMaster (
                AutoId,
                ClientName,
                ClientContactNumber,
                ClientAddress,
                ClientPAN,
                ClientGST,
                ClientCIN,
                Client_ClientId,
                Client_SecreteKey,
                CreatedBy,
                CreatedDate
            ) VALUES (
                (SELECT ISNULL(MAX(AutoId), 0) + 1 FROM ClientMaster),
                '${escapeString(ClientName)}',
                ${ClientContactNumber ? `'${escapeString(ClientContactNumber)}'` : 'NULL'},
                ${ClientAddress ? `'${escapeString(ClientAddress)}'` : 'NULL'},
                ${ClientPAN ? `'${escapeString(ClientPAN)}'` : 'NULL'},
                ${ClientGST ? `'${escapeString(ClientGST)}'` : 'NULL'},
                ${ClientCIN ? `'${escapeString(ClientCIN)}'` : 'NULL'},
                '${escapeString(autoGeneratedClientId)}',
                ${Client_SecreteKey ? `'${escapeString(Client_SecreteKey)}'` : 'NULL'},
                '${escapeString(currentUser)}',
                GETDATE()
            )
        `;

        console.log('Insert query:', insertQuery);

        await executeQuery(insertQuery);

        // Fetch the newly created client
        const selectQuery = `
            SELECT * FROM ClientMaster 
            WHERE Client_ClientId = '${escapeString(autoGeneratedClientId)}'
        `;

        const newClient = await executeQuery(selectQuery);
        console.log('Newly created client:', newClient[0]);

        res.status(201).json({
            success: true,
            message: 'Client created successfully',
            data: {
                ...newClient[0],
                Client_ClientId: autoGeneratedClientId
            }
        });
    } catch (error) {
        console.error('Error creating client:', error);
        res.status(500).json({
            success: false,
            message: 'Internal server error',
            error: error.message
        });
    }
});

export default router;